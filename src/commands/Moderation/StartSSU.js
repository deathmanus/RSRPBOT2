const { SlashCommandBuilder, EmbedBuilder } = require('@discordjs/builders');
const { setSSUStatus, getSSUStatus } = require('../../Database/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('zab√≠r√°n√≠_start')
        .setDescription('Spu≈°tƒõn√≠ poƒç√≠t√°n√≠ basepoint≈Ø (SSU)'),
    async execute(interaction) {
        try {
            await interaction.deferReply();

            // Kontrola opr√°vnƒõn√≠
            if (!interaction.member.permissions.has('Administrator') && 
                !interaction.member.roles.cache.some(role => role.name.toLowerCase().includes('moderator'))) {
                return interaction.editReply('‚ùå Nem√°te opr√°vnƒõn√≠ k pou≈æit√≠ tohoto p≈ô√≠kazu.');
            }

            // Kontrola, zda ji≈æ nen√≠ SSU aktivn√≠
            getSSUStatus((err, ssuStatus) => {
                if (err) {
                    console.error('Error checking SSU status:', err);
                    return interaction.editReply('‚ùå Nastala chyba p≈ôi kontrole stavu SSU.');
                }

                if (ssuStatus && ssuStatus.is_active) {
                    return interaction.editReply('‚ùå SSU je ji≈æ aktivn√≠.');
                }

                // Spu≈°tƒõn√≠ SSU
                setSSUStatus(true, interaction.user.id)
                    .then(() => {
                        const now = new Date();
                        const timeString = new Intl.DateTimeFormat('en-GB', { 
                            hour: '2-digit', 
                            minute: '2-digit', 
                            hour12: false, 
                            timeZone: 'Etc/GMT-2' 
                        }).format(now);

                        const embed = new EmbedBuilder()
                            .setColor(0x00FF00)
                            .setTitle('üöÄ SSU spu≈°tƒõno!')
                            .setDescription(`Zaƒç√°tek zab√≠r√°n√≠: **${timeString}**`)
                            .addFields(
                                { name: 'Spustil', value: interaction.user.tag, inline: true },
                                { name: 'ƒåas spu≈°tƒõn√≠', value: timeString, inline: true }
                            )
                            .addFields({ 
                                name: '‚ÑπÔ∏è Info', 
                                value: 'Hr√°ƒçi mohou nyn√≠ pou≈æ√≠vat `/capture` pro zab√≠r√°n√≠ basepoint≈Ø.\nKa≈æd√Ωch 30 minut budou udƒõleny 2 body do frakƒçn√≠ho rozpoƒçtu za ka≈æd√Ω zabran√Ω basepoint.', 
                                inline: false 
                            })
                            .setTimestamp();

                        interaction.editReply({ embeds: [embed] });
                    })
                    .catch((error) => {
                        console.error('Error starting SSU:', error);
                        interaction.editReply('‚ùå Nastala chyba p≈ôi spu≈°tƒõn√≠ SSU.');
                    });
            });

        } catch (error) {
            console.error('Error in start command:', error);
            await interaction.editReply('‚ùå Nastala chyba p≈ôi zpracov√°n√≠ p≈ô√≠kazu.');
        }
    }
};
